{"version":3,"sources":["logo.svg","component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","user","id","name","email","website","CardList","users","map","key","SearchBox","handleChange","placeHolder","onChange","type","placeholder","App","searchEvents","event","setState","searchText","target","value","state","monstors","fetch","then","response","json","filteredMonstors","this","filter","m","toLowerCase","includes","console","log","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,2LCI9BC,G,wBAAM,SAACC,GAChB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,KAAKC,MACxD,4BAAKL,EAAMI,KAAKE,MAChB,2BAAIN,EAAMI,KAAKG,OACf,2BAAIP,EAAMI,KAAKI,YCJVC,EAAU,SAACT,GACpB,OAAO,yBAAKC,UAAU,aAEVD,EAAMU,MAAMC,KAAI,SAAAP,GAAI,OAChB,kBAAC,EAAD,CAAMA,KAAMA,EAAMQ,IAAKR,EAAKC,UCJnCQ,G,MAAW,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YACpC,OAAO,2BAAOC,SAAUF,EAAcG,KAAK,SAASC,YAAaH,MCuCtDI,E,YAlCb,aAAe,IAAD,8BACZ,+CASFC,aAAe,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEC,WAAWF,EAAMG,OAAOC,SARhE,EAAKC,MAAQ,CACXH,WAAY,GACZI,SAAU,IAJA,E,iFAYO,IAAD,OAClBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAE,GAAI,OAAE,EAAKT,SAAS,CAACK,SAASI,S,+BAGhC,IAAD,OACDC,EAAmBC,KAAKP,MAAMC,SAASO,QAAO,SAAAC,GAAC,OAAEA,EAAE7B,KAAK8B,cAAcC,SAAS,EAAKX,MAAMH,WAAWa,kBAI3G,OAFAE,QAAQC,IAAIN,KAAKP,MAAMH,WAAa,MAAQS,EAAiBQ,QAErD,yBAAKvC,UAAU,OACvB,4BAAQA,UAAU,cAAlB,mBACA,+CACE,kBAAC,EAAD,CAAWc,YAAY,iBAAiBD,aAAcmB,KAAKb,gBAE7D,8CACA,kBAAC,EAAD,CAAUV,MAAOsB,S,GA/BHS,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.c5d92961.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nimport './card.style.css'\n\nexport const Card =(props) => {\n    return <div className='card-container'>\n        <img alt=\"user\" src={`https://robohash.org/${props.user.id}`} ></img>\n        <h1>{props.user.name}</h1>\n        <p>{props.user.email}</p>\n        <p>{props.user.website}</p>\n    </div>;\n}\n","import React from 'react';\n\nimport './card-list.style.css';\nimport {Card} from './../card/card.component';\n\nexport const CardList =(props) => {\n    return <div className='card-list'> \n            {\n                props.users.map(user => \n                    <Card user={user} key={user.id}>\n                    </Card>\n                )\n            }\n            </div>\n        \n}\n\n","import React from 'react';\n\nimport './search-box.style.css';\n\n\nexport const SearchBox =({handleChange, placeHolder}) => {\n    return <input onChange={handleChange} type=\"search\" placeholder={placeHolder}></input>;\n}\n\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {CardList} from './component/card-list/card-list.component'\nimport {SearchBox} from './component/search-box/search-box.component'\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      searchText: '',\n      monstors: [ ]\n    };\n\n    \n  }\n\n  searchEvents = (event) => this.setState({ searchText:event.target.value });\n \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(json=>this.setState({monstors:json}));\n  }\n\n  render() {\n    const filteredMonstors = this.state.monstors.filter(m=>m.name.toLowerCase().includes(this.state.searchText.toLowerCase()));\n\n    console.log(this.state.searchText + \" - \" + filteredMonstors.length);\n\n    return (<div className=\"App\">\n    <header className=\"App-header\">Monsters Rolodox\n    <h1>Monstor Rodolex</hn      <SearchBox placeHolder=\"Search by name\" handleChange={this.searchEvents}></SearchBox>\n    </header>\n    <h1>Hello World!!!</h1>\n    <CardList users={filteredMonstors}></CardList>\n  </div>)\n  }\n}\n\nexport default App;\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}